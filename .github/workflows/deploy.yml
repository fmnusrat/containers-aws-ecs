name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-south-1                              # Change this to your AWS region
  ECR_REPOSITORY: my-ecr-repo                         # Change this to your ECR repository name
  ECS_CLUSTER: my-ecs-cluster                         # Change this to your ECS cluster name
  ECS_SERVICE: my-ecs-service                         # Change this to your ECS service name
  ECS_TASK_DEFINITION: ecs-task-def                   # Change this to your ECS task definition name
  CONTAINER_NAME: my-container                        # Change this to your container name
  VPC_ID: vpc-0939e64691c6586a8                       # Change this to your VPC ID
  SECURITY_GROUP_ID: sg-06ed90ac9f1974153             # Change this to your Security Group ID
  SUBNET_IDS: subnet-047b28549eddad8ec,subnet-059136a6f03d0750e,subnet-08d08bb5426cb7759  # Change this to your Subnet IDs

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Fetch the existing task definition
      id: fetch-task-def
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} > task-def.json

    - name: Update the task definition with the new image
      id: update-task-def
      run: |
        jq --arg IMAGE "$IMAGE" '.taskDefinition.containerDefinitions[0].image = $IMAGE' task-def.json > new-task-def.json

    - name: Register the updated task definition
      id: register-task-def
      run: |
        aws ecs register-task-definition --cli-input-json file://new-task-def.json
      outputs:
        task-definition-arn: ${{ steps.register-task-def.outputs.taskDefinition.taskDefinitionArn }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.register-task-def.outputs.task-definition-arn }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
