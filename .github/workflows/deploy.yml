# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: aws ecr create-repository --repository-name my-ecr-repo --region us-east-2.
#    Replace the value of the ECR_REPOSITORY environment variable in the workflow below with your repository's name.
#    Replace the value of the AWS_REGION environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the ECS_SERVICE environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the ECS_CLUSTER environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of aws ecs register-task-definition --generate-cli-skeleton.
#    Replace the value of the ECS_TASK_DEFINITION environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the CONTAINER_NAME environment variable in the workflow below with the name of the container
#    in the containerDefinitions section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

  env:
  AWS_REGION: ap-south-1                     # Change this to your AWS region
  ECR_REPOSITORY: my-ecr-repo                # Change this to your ECR repository name
  ECS_CLUSTER: my-ecs-cluster                # Change this to your ECS cluster name
  ECS_SERVICE: my-ecs-service                # Change this to your ECS service name
  CONTAINER_NAME: my-container               # Change this to your container name
  VPC_ID: vpc-0939e64691c6586a8                   # Change this to your VPC ID
  SECURITY_GROUP_ID: sg-06ed90ac9f1974153         # Change this to your Security Group ID
  SUBNET_IDS: subnet-047b28549eddad8ec,subnet-059136a6f03d0750e,subnet-08d08bb5426cb7759  # Change this to your Subnet IDs
  IMAGE: ${{ steps.build-image.outputs.IMAGE }}   # Add this line to include the IMAGE variable

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR Repository (if not exists)
      run: |
        REPO_EXISTS=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --query 'repositories[0].repositoryName' --output text 2>/dev/null || echo "notfound")
        if [ "$REPO_EXISTS" = "notfound" ]; then
          aws ecr create-repository --repository-name $ECR_REPOSITORY
          echo "ECR repository $ECR_REPOSITORY created."
        else
          echo "ECR repository $ECR_REPOSITORY already exists."
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      outputs:
        IMAGE: ${{ steps.build-image.outputs.IMAGE }}
         
   - name: Create ECS Cluster (if not exists)
      run: |
        CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters $ECS_CLUSTER --query 'clusters[0].clusterName' --output text 2>/dev/null || echo "notfound")
        if [ "$CLUSTER_EXISTS" = "notfound" ]; then
          aws ecs create-cluster --cluster-name $ECS_CLUSTER
          echo "ECS cluster $ECS_CLUSTER created."
        else
          echo "ECS cluster $ECS_CLUSTER already exists."
        fi

    - name: Register new ECS task definition
      id: register-task
      run: |
        TASK_DEF_JSON=$(cat <<EOF
        {
          "family": "$ECS_SERVICE",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "executionRoleArn": "arn:aws:iam::602480057045:role/ecsTaskExecutionRole",  # Use correct role ARN here
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "memory": 512,
              "cpu": 256,
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80
                }
              ]
            }
          ]
        }
        EOF
        )
        echo "$TASK_DEF_JSON" > task-def.json
        TASK_REVISION=$(aws ecs register-task-definition --cli-input-json file://task-def.json --query 'taskDefinition.revision' --output text)
        echo "TASK_REVISION=$TASK_REVISION" >> $GITHUB_ENV

    - name: Create ECS Service (if not exists)
      run: |
        SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].serviceName' --output text 2>/dev/null || echo "notfound")
        if [ "$SERVICE_EXISTS" = "notfound" ]; then
          aws ecs create-service --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --task-definition $TASK_DEF_JSON --desired-count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}"
          echo "ECS Service $ECS_SERVICE created."
        else
          echo "ECS Service $ECS_SERVICE already exists."
        fi

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEF_JSON
